version: '3.8'

services:
  postgres:
    image: postgres:17-alpine
    container_name: weather_app_db
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/db/init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./src/db/populate-interests.sql:/docker-entrypoint-initdb.d/02-populate-interests.sql
    networks:
      - weather_app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: weather_app_backend
    environment:
      PORT: ${PORT}
      DB_HOST: postgres  # Sobrescribe localhost del .env
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      JWT_SECRET: ${JWT_SECRET}
    ports:
      - "${PORT}:${PORT}"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./src:/app/src
      - ./package.json:/app/package.json
      - ./tsconfig.json:/app/tsconfig.json
    networks:
      - weather_app_network
    command: sh -c "npm run init-db && npm run dev"

volumes:
  postgres_data:

networks:
  weather_app_network:
    driver: bridge